=======================================================================================================================================================================
BACKLOG
=======================================================================================================================================================================



-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
7.

// unit test the generate random numbers and test them  mpfr comapared to float
????????????????

power
2147483647 (2^31-1) 

double can do 15 or 16sf,

eg
while true

	rnd1 = random 5dp
	rnd2 = random 5dp 

	numMe = rnd1 * 2147483647    large integer

	num c++ = ditto (double)

	// compare to 12 dp

-----------------------------------------------------------------------
8. first pi example - nama***



https://en.wikipedia.org/wiki/Borwein%27s_algorithm


-----------------------------------------------------------------------
9. second pi example

Class number 2 (1989) Ramanujanâ€“Sato series for l/ pi
25 digits per term

where
A = 212 175 710 912 sqrt(61) + 1 657 145 277 365,
B = 13 773 980 892 672 sqrt(61) + 107 578 229 802 750,
C = [ 5280 (236 674 + 30 303 sqrt(61) ) ]  pow 3.

vs compare to refernce pi


-----------------------------------------------------------------------
10.

* unit tests - which framework ???
* do proper tests - do asserts for unit tests - for each section
void print_number(int* myInt) {
  assert (myInt!=NULL);
  printf ("%d\n",*myInt);
}

* put thest code in /test folder
----------------------------------------------------------------------



11.
fix up readme



=======================================================================================================================================================================
gmp c++
=======================================================================================================================================================================

12.


 make my own c++ class for gmp
. Repeat pattern for gmp
. Conversion between mrfp and gmp



// class mpq_t_wrapper

mpq_t_wrapper
mpfr::toMpq( std::string& numerator, std::string& denominator, bool reduce ) 
{
}


std::string 
mpfr::toFraction( std::string& numerator, std::string& denominator, bool reduce ) 
{
	return toMpq()->toSTring() ;
}
4. 

gmp raw toRational() ; / return gmp rational

... Convert to rational, fix numerator, convert back to mpfr ?????

later, return class


--------------------
gmp c++ fucntions

+ 
- 
/ 
* 
.abs
.inv
.neg
comparison functions
.toMpfr()


mpq()                             ;               
mpq( const mpq& rhs )            ;
mpq& operator=( const mpq& rhs ) ;
mpq( const char* )                ;
mpq( const std::string& )           ;

std::string toString()          ;
operator    std::string()       ;
operator    std::string() const ;

friend std::ostream& operator<<( std::ostream& os, const mpq& mpq ) ;



mpq( const mpfr& rhs )            ;

// do i need, for mpfr: ???????????
	mpq& operator=( const mpfr& rhs ) ;
	operator    abm::mpfr()       ;
??????????????? 


need class 			
mpq_t_wrapper* p        = nullptr         ;

--------------------



=======================================================================================================================================================================
DONE
=======================================================================================================================================================================

sf
// global sf
// global rounding
// test a base 16 number
// test a base 2 number
// * how to ignore *.o in vscode

*how to run make in vscode

 delete me
//operator mpq_class() ;
//mpq_class toMpq() ;

// ceil
// floor
// trunc

// overload += *= /= -+ ^=

// operators and constructors from strings
// x = a + "3.14" 
// x = "3.14" + a

// handle mpfr( "1E10" ) if base 10

// change name sf to sifnificantFigures ??? no, changed name to local and global


---------------------------------------------------------------



---------------------------------------------------

// change sf  to # of significant decimal digits
. Add 10 or more bin digits to sig decimal digits for extra x decimal places

binary sf = log2( power( 10, decimal sigdigs)) + 20

* factorial
* sqrt

// change file nam stringhlper to stringhlp
// change sprintf to cat

* put in lib

// fix random() to stringcat

// handle -0.0, convert to +0.0

// print to n significant digits

// round to n significant digits

// refactor numberhlp

change to vector  tostring

// toStirng debug issue ????

// fix constructir stuff


// tostring()
. Tostring to default to  removing trailing zeros
. round last sig fig
. chenge -0.0 to +0.0
. handle "-0.00000123456789" to 5 dp


		// make function call const
		//auto str = const_cast<mpfr*>( &mpfr1 )->toString() ;
				
		//os << str ;

// cahnge to 
static const mpfr_sf_t psfDefault = (mpfr_sf_t) 100 
// to
static const unsigned long sfn10default = 100 ;

// maths operations should throw an exextion if the number cant be represebted

// demo 1e1000 + 1e-1000 + 1

Get rid of gmp cxx

-------------

BUG 

need to implement mpfr:roundSignificantFigures 
fix in 

	mpfr::mpfr( const mpfr& rhs, unsigned long theisf10 ) // constr



	abm::mpfr c( "2.0234", 10, 20 ) ;
	abm::mpfr d( "3.1234", 10, 30 ) ;

	std::cout << "c      = " << c << std::endl ;
	std::cout << "d      = " << d << std::endl ;
	std::cout << "c + d  = " << (c + d) << std::endl ;
	std::cout << "d + c  = " << (d + c) << std::endl ;

	d += c  ; 
	c += d  ; 
	std::cout << "c = " << c << std::endl ;
	std::cout << "d = " << d << std::endl ;

	abm::mpfr e( c, 3UL ) ;
	abm::mpfr f( d, 3UL ) ;
	std::cout << "e = " << e << std::endl ;
	std::cout << "f = " << f << std::endl ;

	abm::mpfr g( c, 2UL ) ;
	abm::mpfr h( d, 2UL ) ;
	std::cout << "g = " << g << std::endl ;
	std::cout << "h = " << h << std::endl ;

c      = +2.0234000000000000000 [sf 20(10), 100(2), len 22 ]
d      = +3.12340000000000000000000000000 [sf 30(10), 133(2), len 32 ]
c + d  = +5.14680000000000000000000000000 [sf 30(10), 133(2), len 32 ]
d + c  = +5.14680000000000000000000000000 [sf 30(10), 133(2), len 32 ]
c = +7.17020000000000000000000000000 [sf 30(10), 133(2), len 32 ]
d = +5.14680000000000000000000000000 [sf 30(10), 133(2), len 32 ]
e = +7.17 [sf 3(10), 43(2), len 5 ]
f = +5.15 [sf 3(10), 43(2), len 5 ]
g = +7.2 [sf 2(10), 40(2), len 4 ]
h = +5.2 [sf 2(10), 40(2), len 4 ]           <==== BUG !!!!


get rid of baseX constructir - convert to enum

change "sf" to "significantFigures"



std::string
	mpfr::roundToDecimalPlaces( long theDecimalPlaces ) // return number rounded to x dp

std::string
	mpfr::roundToSignificantDigits( ulong sf ) // return number rounded to x sf





mpfr roundDecimalPlaces     ( unsigned long dp ) ; 
mpfr roundSignificantFigures( unsigned long sf ) ;

NOT DOING void toMixedFraction(  ... ) 
-3 +14/+100
-3 7/+50


// function to convert to rational numertaor / denominator, reduced to lcm/gcf

void toFraction     (                       std::string numerator, std::string& denominator, bool reduce = true ) ;			

return gmp compatible toFraction

-314/100 
-157/50



REGEX rewrite


// < > == >= <=  !=


------- ++++ FIX THIS all operators like operator+

// sf IS THE MAX sf OF THE OPERANDS INVOLVED

// fix 	operator+( const mpfr& op1, const mpfr& op2 )  et al 

// when i add / mult / whatever numbers,  what sf do i use ?
// test that sf comes from the lhs, maybe ???

// eg, we cant have the situation where adding the same two numbers in different ways produces differnet results:


// should be able to add / multiply two numbers in ether direction and get same result

// fix this test
ERROR:
a14               -12.345678900000000000000000000000000000000000 [sf 44(10) 180(2)]
a15               -12.345                                        [sf 5(10) 50(2)]

a16 = a14 + a15 = -24.691357799999995792313711717724800109863281 [sf 44(10) 180(2)]
a17 = a15 + a14 = -24.691                                        [sf 5(10) 50(2)]

0. fix version


* test to just keep printing random numbers
* .nextInteger( 6 ) // next integer 1 to 6
* test to roll dice and count , and see if anthing goes outside 1 - 6




abm::random class
	constructor( sig figures, string seed, number base  )
	destructor()

	abm::mpfr get()  // get next random number

	static std::string randomHexBytes( int bytes ) ; 

	seed()



----------------

6.


 mpfr_t x;

  gmp_randstate_t s;

  gmp_randinit_default (s);
  gmp_randseed_ui (s, 42);
  mpfr_init2 (x, 17);

  mpfr_urandomb (x, s);

  mpfr_urandomb (x, s);



  mpfr_clear (x);
gmp_randclear (s);



-----------------

void gmp_randseed (gmp_randstate_t state, const mpz_t seed)



------------------


    mpz_t modulus
    mpz_init(modulus);
    mpz_init_set_str(modulus,
                     "830BD41A71825C6AEAF89AC06FEA5B51E65601E6E"
                     "1273AC30BE6644F3F80F766B94BC3C2888452C019"
                     "2B2562E1EC386A7C9B22F92BF597A6694CFB65146"
                     "A6180BF567357707CBB4F222057266A1891AF416A"
                     "F4814AEC2F495A4A16D7173857C64BE0FD530D80D"
                     "98730D7CB5574ACB2FCFA41215A93C1675D17E11EA7743E913B",
                     16);


    mpz_t exponent_256;
    mpz_init(exponent_256);


    gmp_randstate_t exponent_seed;
    gmp_randinit_default(exponent_seed);


    gmp_randseed(exponent_seed, modulus);


    for(n = 0; n < 5; n++) {
        mpz_urandomb(exponent_256, exponent_seed, 256);
        mpz_out_str(stdout, 10, exponent_256);
        printf("\n");

======================================

constructor
==========
mpz_t seed
mpz_init (seed)
mpz_init_set_str (seed, const char *str, 16)

gmp_randstate_t state;
gmp_randinit_default(state);
gmp_randseed(state, seed);


-------------------
mpfr_t x;
mpfr_init2 (x, 17);
mpfr_urandomb (x, s);
mpfr_clear (x);
----------------------


destrt
========================
gmp_randclear (state)
mpz_clear (seed);




============================
--------------------------------------------

Function: int mpfr_urandomb (mpfr_t rop, gmp_randstate_t state)

    Generate a uniformly distributed random float in the interval 0 <= rop < 1. More precisely, 
	the number can be seen as a float with a random non-normalized significand and exponent 0, 
	which is then normalized (thus if e denotes the exponent after normalization, then the least -e significant bits of the significand are always 0).

    Return 0, unless the exponent is not in the current exponent range, 
	in which case rop is set to NaN and a non-zero value is returned (this should never happen in practice, except in very specific cases). 
	The second argument is a gmp_randstate_t structure which should be created using the GMP gmp_randinit function (see the GMP manual).

    Note: for a given version of MPFR, the returned value of rop and the new value of state 
	(which controls further random values) do not depend on the machine word size



------------------------------
C++ 11 randoms



#include <iostream>
#include <limits>
#include <random>

int main()
{
    std::default_random_engine eng((std::random_device())());

    std::uniform_real_distribution<float> fdis(0, 1.0);

    for (int i = 0; i < 10; ++i)
    {
        float v = fdis(eng);
        std::cout << v << std::endl;
    }

    return 0;
}

include <random>  
#include <iostream>  
  
using namespace std;  
  
int main()  
{  
    random_device rd;   // non-deterministic generator  
    mt19937 gen(rd());  // to seed mersenne twister.  
    uniform_int_distribution<> dist(1,6); // distribute results between 1 and 6 inclusive.  
  
    for (int i = 0; i < 5; ++i) {  
        cout << dist(gen) << " "; // pass the generator to the distribution.  
    }  
    cout << endl;  
}  


// string mpfr::randomHexInteger( unsigned long hexDigits ) 



// string mpfr::randomDecimalInteger( unsigned long decimalDigits  )  /  +-xxxxxxxx



// mpfr   mpfr::randomFloat( unsigned long digits  ) // between 0 and 1
// 0.xxxxxx




// create function to random [0.0, 1)
// mpfr_urandomb ( seed ??? )
// what do to under windows ????


std::random_device rd;
 std::mt19937 e{rd()}; // or std::default_random_engine e{rd()};
 std::uniform_int_distribution<int> dist{1, 5};

CORE DUMP


	std::string 
	mpfr::toDecimal( bool allSigFig ) // default false, false means remove trailing zeros


	abm::mpfr j( "9.2345678E-20000000", 10 ) ;
	abm::mpfr k( "1.2345679E-100000", 10 ) ;


	std::cout << "1 -----------------------------------------------------------------" << std::endl ;
	bool bb = k <= j ;
	std::cout << "2 -----------------------------------------------------------------" << std::endl ;
	std::cout << "k\t<= j\t" << std::boolalpha << bb <<  std::endl ;
	std::cout << "3 -----------------------------------------------------------------" << std::endl ;




=======================================================================================================================================================================

